<html>
<head>
  <meta charset=utf-8 />
  <title>ArcGIS demo</title>
  <meta name='viewport' content='initial-scale=1,maximum-scale=1,user-scalable=no' />

  <!-- Load Leaflet from CDN-->
  <link rel="stylesheet" href="//cdn.jsdelivr.net/leaflet/0.7.3/leaflet.css" />

  <script src="//cdn.jsdelivr.net/leaflet/0.7.3/leaflet.js"></script>

  <!-- Load Esri Leaflet from CDN -->
  <script src="//cdn.jsdelivr.net/leaflet.esri/1.0.0/esri-leaflet.js"></script>

	<!-- ArcGIS API for JavaScript library references -->
  <script src="//js.arcgis.com/3.14"></script>
	
	<!-- jquery -->
  <script src="//code.jquery.com/jquery-1.11.1.min.js"></script>

  <style>
    body { margin:0; padding:0; }
    #map { position: absolute; height:800; width:900; }
    #prefix { position: absolute; top:810; left:10; }
    #opensearch_url { position: absolute; top:830; left:10; }
  </style>
</head>
<body>

<style>
  #basemaps-wrapper {
    position: absolute;
    top: 10px;
    right: 10px;
    z-index: 10;
    background: white;
    padding: 10px;
  }
  #basemaps {
    margin-bottom: 5px;
  }
</style>

<div id="map"></div>

<div id="basemaps-wrapper" class="leaflet-bar">
  <select name="basemaps" id="basemaps">
    <option value="Topographic">Topographic<options>
    <option value="Streets">Streets</option>
    <option value="NationalGeographic">National Geographic<options>
    <option value="Oceans">Oceans<options>
    <option value="Gray">Gray<options>
    <option value="DarkGray">Dark Gray<options>
    <option value="Imagery">Imagery<options>
    <option value="ShadedRelief">Shaded Relief<options>
  </select>
</div>
<br/>
<br/>
<br/>
<br/>

<div id='legend'>
</div>
<br/>
<div id='prefix'>
</div>
<br/>
<div id='opensearch_url'>
</div>


<script>
  var map 	= L.map('map').setView([<%= latitude %>, <%= longitude %>], 5);
  var layer = L.esri.basemapLayer('Topographic').addTo(map);
  var layerLabels;

  function setBasemap(basemap) {
    if (layer) {
      map.removeLayer(layer);
    }
    layer = L.esri.basemapLayer(basemap);
    map.addLayer(layer);
    if (layerLabels) {
      map.removeLayer(layerLabels);
    }

    if (basemap === 'ShadedRelief' || basemap === 'Oceans' || basemap === 'Gray' || basemap === 'DarkGray' || basemap === 'Imagery' || basemap === 'Terrain') {

      layerLabels = L.esri.basemapLayer(basemap + 'Labels');
      map.addLayer(layerLabels);
    }
  }

  var basemaps = document.getElementById('basemaps');

  basemaps.addEventListener('change', function(){
    setBasemap(basemaps.value);
  });


// Let's do an opensearch query for gpm precipitation
  var opensearch_url = "<%=host%>/opensearch?q=<%=product%>&lat=<%=latitude%>&lon=<%=longitude%>&limit=1&sources=<%=source%>"
  
  $("#opensearch_url").html("<a href='"+opensearch_url+"'>OpenSearch URL</a>")
  
  require(["esri/request"], function(esriRequest) {
	  var style;
	  var layer;
	  
	  function OnEachFeature(feature) {
		  return {
			  weight:2
		  }
	  }
	  
	  function PointToLayer(feature, latlng) {
		 
		  var styling = style["true"]
		  if( styling.icon ) {
			  var icon = L.icon( {
				  iconUrl: 		styling.icon,
				  iconSize: 	styling.iconSize,
				  iconAnchor: 	styling.iconAnchor
			  })
			  return L.marker(latlng, {
				  icon: icon
			  });
		  }
	  }
	  
	  function StyleFeature(feature) {
		
		  for( var k in style) {
			  // k is something like {precip}==2
			  var key = k.replace(/{[^{}]+}/g, function(key){
    			  return "feature.properties." + key.replace(/[{}]+/g, "") || "";
			  });
			  var result = eval(key);
			 
			  if( result ) return style[k]
		  }
	  }
	  
	  function FetchFeatureLayer(url) {
		  console.log("FetchFeatureLayer at", url)
		  if( url) {
			  layer = L.esri.featureLayer({
				  url: url,
				  simplifyFactor: 0.5,
				  precision: 5,
				  style: StyleFeature,
	//			  onEachFeature: OnEachFeature,
				  pointToLayer: PointToLayer
			  }).addTo(map);
			  
			  layer.bindPopup(function (feature) {
				  var html = "<table>"
				  var props = feature.properties
				  delete props.objectid
				  for( var f in props) {
				  	html +="<tr><td>"+f+":</td><td>"+props[f]+"</td></tr>"
				  }
				  html += "</table>"
			      return html;
			    });
		  }
	  }
	  
	  function DisplayLegend(url) {
		  var request = esriRequest({
			  url: url,
			  handleAs: "text"
		  })
		  
		  function requestSucceeded(data) {
			  $('#legend').html(data)
		  }

		  function requestFailed(error) {
			  console.log("Error Getting Legend: ", error.message);
		  }

		  request.then(requestSucceeded, requestFailed);
	  }

	  function GetStyle(url) {
		  var request = esriRequest({
			  url: 		url
			  //handleAs: "text"
		  })
		  
		  function requestSucceeded(data) {
			  //console.log("Got Style: ", data);
			  style = data
		  }

		  function requestFailed(error) {
			  console.log("Error Getting Style: ", error.message);
		  }

		  request.then(requestSucceeded, requestFailed);
	  	
	  }
	  
	  function processOpenSearch(data) {
		  var item 		= data.items[0];	// we asked for one item, hopefully we got one
		  var actions 	= item.action;
		  var id		= item['@id'];
	
		  $('#prefix').html(id)
	
		  var legend_url, style_url, credits_url, featureserver_url;
		  
		  for( var a in actions ) {
			  var action = actions[a];
			  if( action["@type"] === "ojo:map" ) {
				  var usings = action["using"];
				  for( var u in usings ) {
					  var using = usings[u];
					  if( using['@id'] === 'legend') {
						  legend_url = using.url
					  } else if( using['@id'] === 'style') {
						  style_url = using.url
					  } else if( using['@id'] === 'credits') {
						  credits_url = using.url
					  }
				  }
				  DisplayLegend(legend_url)
				  GetStyle(style_url)
			  } else if( action['@type'] === "ojo:esri") {
				  var usings 	= action["using"];
				  var using 	= usings[0];
				  featureserver_url = using.url
			  }
		  }
		  FetchFeatureLayer(featureserver_url)
	  }
	  
	  var request = esriRequest({
	    url: opensearch_url
	  })
	  
	  function requestSucceeded(data) {
		  //console.log(JSON.stringify(data))
		  processOpenSearch(data)
	  }

	  function requestFailed(error) {
	    console.log("Error: ", error.message);
	  }

	  request.then(requestSucceeded, requestFailed);
  });
</script>

</body>
</html>