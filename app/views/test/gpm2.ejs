<!doctype html>
<html>
<head>
    <title>GPM Client Vector Tiling</title>
    <meta charset="utf-8">

    <style>
        html, body {
            height: 100%;
            padding: 0;
            margin: 0;
            background: rgb(14, 21, 30);
            height: 100%;
            font-family: Tahoma, Geneva, Verdana, sans-serif;
            font-size:12px;
            color:#808080;
        }
        h2,a {
          color: white;
        }
        
        #map {
            position: absolute;
            height: 100%;
            width: 100%;
    		   
            background-color: #333;
        }
        
    	  .daily_precipitation_map-info .legend-scale ul {
    	     margin: 0;
    	     margin-bottom: 5px;
    	     padding: 0;
    	     float: right;
    	     list-style: none;
         }
    		.daily_precipitation_map-info .legend-scale ul li {
    		   font-size: 80%;
    		   list-style: none;
    		    margin-left: 0;
    		    line-height: 18px;
    		    margin-bottom: 2px;
    		}
    	  .daily_precipitation_map-info ul.legend-labels li span {
    	    display: block;
    	    float: left;
    	    height: 16px;
    	    width: 30px;
    	    margin-right: 5px;
    	    margin-left: 0;
    	    border: 1px solid #999;
    	  }
    	  .daily_precipitation_map-info .legend-source {
    	     font-size: 70%;
    	     color: #999;
    	     clear: both;
    	  }
    		.daily_precipitation_map-info {
    		    padding: 6px 8px;
    		    font: 14px/16px Arial, Helvetica, sans-serif;
    		    background: white;
    		    background: rgba(255,255,255,0.8);
    		    box-shadow: 0 0 15px rgba(0,0,0,0.2);
    		    border-radius: 5px;
    			 position: relative;
    			 float: right;
    		    line-height: 18px;
    		    color: #555;
    		}
        .black {
          color: black;
        }
    </style>
</head>

<script>
var url         = "/test/topojson/gpm_24.20150604";
</script>

<body>
  <h2>&nbsp;GPM Global Data 2015-06-04 </h2>
  <h4>&nbsp;<a href='/test/topojson/gpm_24.20150604'>Download Data</a></h4>
  </br>
  
    <div id="map"></div>
    <br/>
    
		<div id='daily_precipitation_legend' class='daily_precipitation_map-info'>
		  <div class='legend-title'>Daily Precipitation</div>
		  <div class='legend-scale'>
		    <ul class='legend-labels'>
			   <li><span style='background:  #56F6FC '></span>&nbsp;2mm</li>
			   <li><span style='background:  #58DEEE '></span>&nbsp;3mm</li>
			   <li><span style='background:  #5BC6DE '></span>&nbsp;5mm</li>
			   <li><span style='background:  #5EAFCC '></span>&nbsp;8mm</li>
			   <li><span style='background:  #5E99B8 '></span>&nbsp;13mm</li>
			   <li><span style='background:  #5D84A3 '></span>&nbsp;21mm</li>
			   <li><span style='background:  #596F8D '></span>&nbsp;34mm</li>
			   <li><span style='background:  #535B77 '></span>&nbsp;55mm</li>
			   <li><span style='background:  #4A4861 '></span>&nbsp;89mm</li>
			   <li><span style='background:  #3F374B '></span>&nbsp;144mm</li>
			   <li><span style='background:  #322737 '></span>&nbsp;233mm</li>
			   <li><span style='background:  #241824 '></span>&nbsp;377mm</li>
		    </ul>
		  </div>
		<div class='legend-source'>Source: <a class='black' href='http://pmm.nasa.gov'>GPM</a>
		</div>&nbsp;&nbsp;

	<!-- Leaflet
    <link rel="stylesheet" href="http://cdn.leafletjs.com/leaflet-0.7.2/leaflet.css" />
    <script src="http://cdn.leafletjs.com/leaflet-0.7.2/leaflet.js"></script>
    -->
    
	<!-- Leaflet -->
    <link rel="stylesheet" href="http://cdn.leafletjs.com/leaflet-0.7.3/leaflet.css" />
    <script src="http://cdn.leafletjs.com/leaflet-0.7.3/leaflet.js"></script>
    
    <!-- Mapbox GL
    <script src='https://api.tiles.mapbox.com/mapbox-gl-js/v0.7.0/mapbox-gl.js'></script>
    <link href='https://api.tiles.mapbox.com/mapbox-gl-js/v0.7.0/mapbox-gl.css' rel='stylesheet' />
  	<script src="/js/leaflet-mapbox-gl.js"></script>
     -->
      
    <script src="http://www.sumbera.com/gist/js/vt/geojson-vt-dev.js"></script>
    <script src="http://www.sumbera.com/gist/js/leaflet/canvas/L.CanvasTiles.js"></script>
	<script src="//ajax.googleapis.com/ajax/libs/jquery/1.11.0/jquery.min.js"></script>	
    <script src="http://d3js.org/topojson.v1.min.js"></script>
	<script src="/js/moment.js"></script>

    <script>
		
		var date 		= moment("2015-08-01")
		var year 		= date.years()
		var month		= date.month() + 1
		if( month < 10 ) month = "0"+ month
		var day			= date.date()
		if (day < 10 ) day = "0"+day
				
		var jday		= date.dayOfYear()
		if( jday < 10) {
			jday = "00"+jday
		} else if( jday < 100 ) {
			jday = "0"+jday
		}
		
		var url         = "http://localhost:7465/products/s3/Global/gpm/" + year + "/" + jday + "/gpm_1d." + year + month + day +".topojson.gz";
		console.log("Getting url", url)
		var hexColors 	= [ "#56F6FC","#58DEEE","#5BC6DE","#5EAFCC","#5E99B8","#5D84A3","#596F8D","#535B77","#4A4861","#3F374B","#322737","#241824"]
		var levels		= [ 377, 233, 144, 89, 55, 34, 21, 13, 8, 5, 3, 2 ]
    
        var accessToken = '<%=token%>';
        var map         = L.map('map', {minZoom:3, maxZoom:12}).setView([<%=latitude%>, <%=longitude%>], 3);
                  
        L.tileLayer('https://{s}.tiles.mapbox.com/v4/cappelaere.map-1d8e1acq/{z}/{x}/{y}.png?access_token=' + accessToken, {
			attribution: '<a href="http://www.mapbox.com/about/maps/" target="_blank">Terms &amp; Feedback</a>'
		}).addTo(map);
        
        L.control.scale().addTo(map);


        var tileOptions = {
            maxZoom:		14,			// max zoom to preserve detail on
            tolerance:		5,			// simplification tolerance (higher means simpler)
            extent:			4096,       // tile extent (both width and height)
            buffer:         64,     	// tile buffer on each side
            debug:          0,        	// logging level (0 to disable, 1 or 2)

            indexMaxZoom:   0,        	// max zoom in the initial tile index
            indexMaxPoints: 100000,   	// max number of points per tile in the index
        };
        
        function hexToRgb(hex) {
            var opacity = 0.4;
            var h=hex.replace('#', '');
          
            var bigint = parseInt(h, 16);
            var r = (bigint >> 16) & 255;
            var g = (bigint >> 8) & 255;
            var b = bigint & 255;

            return "rgba("+ r + "," + g + "," + b + "," + opacity +")";
        }
        
        //-------------------------------------------------
        function colorizeFeatures(data) {
            var counter = 0;
            for (var i = 0; i < data.features.length; i++) {
              counter += data.features[i].geometry.coordinates[0].length;
              
              switch( data.features[i].properties.precip ) {
              case 2:
                data.features[i].properties.color = hexToRgb(hexColors[0]);
                break;
              case 3:
                data.features[i].properties.color = hexToRgb(hexColors[1]);
                break;
              case 5:
                data.features[i].properties.color = hexToRgb(hexColors[2]);
                break;
              case 8:
                data.features[i].properties.color = hexToRgb(hexColors[3]);
                break;
              case 13:
                data.features[i].properties.color = hexToRgb(hexColors[4]);
                break;
              case 21:
                data.features[i].properties.color = hexToRgb(hexColors[5]);
                break;
              case 34:
                data.features[i].properties.color = hexToRgb(hexColors[6]);
                break;
              case 55:
                data.features[i].properties.color = hexToRgb(hexColors[7]);
                break;
              case 89:
                data.features[i].properties.color = hexToRgb(hexColors[8]);
                break;
              case 144:
                data.features[i].properties.color = hexToRgb(hexColors[9]);
                break;
              case 233:
                data.features[i].properties.color = hexToRgb(hexColors[10]);
                break;
              case 377:
                data.features[i].properties.color = hexToRgb(hexColors[11]);
                break;
              }
            }
            return counter
        }
        
        var pad = 0;
      
        function drawingOnCanvas(canvasOverlay, params) {

            var bounds          = params.bounds;
            params.tilePoint.z  = params.zoom;

            var ctx = params.canvas.getContext('2d');
            ctx.globalCompositeOperation = 'source-over';

            var tile = tileIndex.getTile(params.tilePoint.z, params.tilePoint.x, params.tilePoint.y);
            if (!tile) {
                //console.log('tile empty');
                return;
            } else {
                //console.log('getting tile z' + params.tilePoint.z + '-' + params.tilePoint.x + '-' + params.tilePoint.y);
            }

            ctx.clearRect(0, 0, params.canvas.width, params.canvas.height);

            var features = tile.features;

            ctx.strokeStyle = 'grey';

            for (var i = 0; i < features.length; i++) {
                var feature = features[i],
                    type = feature.type;

                ctx.fillStyle = feature.tags.color ? feature.tags.color : 'rgba(255,255,0,0.05)';
                ctx.beginPath();

                for (var j = 0; j < feature.geometry.length; j++) {
                    var geom = feature.geometry[j];

                    if (type === 1) {
                        ctx.arc(geom[0] * ratio + pad, geom[1] * ratio + pad, 2, 0, 2 * Math.PI, false);
                        continue;
                    }

                    for (var k = 0; k < geom.length; k++) {
                        var p = geom[k];
                        var extent = 4096;
                       
                        var x = p[0] / extent * 256;
                        var y = p[1] / extent * 256;
                        if (k) ctx.lineTo(x  + pad, y   + pad);
                        else ctx.moveTo(x  + pad, y  + pad);
                    }
                }

                if (type === 3 || type === 1) ctx.fill('evenodd');
                ctx.stroke();
            }

        };

        var tileindex;

        $.ajax({
        	dataType: "json",
        	url: url,
        	success: function( data ) {
        		console.log("Loading data")
            var start = new Date().getTime();
            
    				for (var key in data.objects) {
    					var geodata = topojson.feature(data, data.objects[key]);
    				}
            var vertices  = colorizeFeatures(geodata);
            tileIndex     = geojsonvt(geodata, tileOptions);
            elapsed       = new Date().setTime(new Date().getTime() - start);
            
            console.log("features", geodata.features.length)
            console.log("vertices", vertices, " ms", elapsed)
            
            var tileLayer = L.canvasTiles()
                      .params({ debug: false, padding: 5 })
                      .drawing(drawingOnCanvas)

            tileLayer.addTo(map);
          },
        	error: function(jqXHR, textStatus, errorThrown) {
        	  	console.log(textStatus, errorThrown);
        	}
        })

      	map.on('click', function(e) {
          var latlng  = e.latlng
          var lat     = parseFloat(latlng.lat.toFixed(2))
          var lng	    = parseFloat(latlng.lng.toFixed(2))
          //console.log("Clicked",lat,lng)
          
          //  var precipurl  = "/test/precip/gpm_24.20150604?lat="+lat+"&lng="+lng;
          var precipurl  = "/test/precip/gpm_1d."+ year+month+day + "?lat="+lat+"&lng="+lng;
          $.ajax({
          	dataType: "json",
          	url: precipurl,
          	success: function( data ) {
              //console.log("precip", data)
              var content = "<table>"
              content += "<tr><td><b>lat</b></td><td>"+data.lat+"</td><tr>"
              content += "<tr><td><b>lng</b></td><td>"+data.lng+"</td><tr>"
              content += "<tr><td><b>precip</b></td><td>"+data.precip+"mm</td><tr>"
              content += "</table>"
 
              var popup = L.popup()
              .setLatLng([lat,lng])
              .setContent(content)
              .openOn(map);
            },
            error: function(jqXHR, textStatus, errorThrown) {
        	  	console.log(textStatus, errorThrown);
            }
          })
          
        })
    </script>
</body>
</html>
